#include <iostream>
#include <string>
#define CAPACITY 100
using namespace std;
template<typename T>
class Queue {
private:
	int front;
	int back;
	T data[CAPACITY];
public:
	Queue() {
		this->front = -1;
		this->back = 0;
	}
	Queue& enqueue(T x) {
		int n = this->size();
		if (n == CAPACITY) {
			throw "Rendi nuk ka hapsire.";
		}
		if (front == -1) {
			front = 0;
		}
		this->data[this->back] = x;
		this->back = (this->back + 1) % CAPACITY;
		return *this;	
	}
	T dequeue() {
		int n = this->size();
		if (n == 0) {
			throw "Nuk ka asnje element ne rend.";
		}
		T x = this->data[this->front];
		if (n == 1) {
			front = -1;
		}
		else {
			this->front = (this->front + 1) % CAPACITY;
		}
		return x;
	}

	T peek() {
		int n = this->size();
		if (n == 0) {
			throw "Nuk ka element ne rend.";
		}
		T x = this->data[front];
		return x;
	}
	int size() {
		if (front == -1) {
			return 0;
		}
		if (front > back) {
			return CAPACITY - front + back;
		}
		else if (front < back) {
			return back - front;
		}
		else {
			return CAPACITY;
		}
	}
};


int main() {
	Queue<int> A = Queue<int>();
	A.enqueue(1);
	// 1
	A.enqueue(2);
	// 1,2
	cout << A.dequeue() << endl;
	// 2
	A.enqueue(3);
	// 2,3
	A.enqueue(4);
	// 2,3,4
	cout<<A.peek()<<endl;
	cout << A.size() << endl;

	return 0;
}
